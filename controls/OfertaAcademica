from abc import ABC, abstractmethod
from typing import Optional, List
import csv
import os
from datetime import datetime

class IOfertaAcademicaRepository(ABC):
    """Interfaz para el repositorio de OfertaAcademica (inyección de dependencias)"""
    
    @abstractmethod
    def guardar(self, oferta: 'OfertaAcademica') -> None:
        pass
    
    @abstractmethod
    def actualizar(self, oferta: 'OfertaAcademica') -> None:
        pass
    
    @abstractmethod
    def eliminar(self, ofa_id: int) -> None:
        pass
    
    @abstractmethod
    def obtener_por_id(self, ofa_id: int) -> Optional['OfertaAcademica']:
        pass
    
    @abstractmethod
    def obtener_todas(self) -> List['OfertaAcademica']:
        pass
    
    @abstractmethod
    def obtener_por_carrera(self, carrera: str) -> List['OfertaAcademica']:
        pass
    
    @abstractmethod
    def obtener_por_campus(self, campus: str) -> List['OfertaAcademica']:
        pass


class OfertaAcademicaCSVRepository(IOfertaAcademicaRepository):
    """Implementación concreta del repositorio usando el CSV existente"""
    
    def __init__(self, archivo_csv: str = "102_ULEAM_OFERTASEGMENTADA_IIPA-2025.csv"):
        self.archivo_csv = archivo_csv
        self._verificar_archivo()
    
    def _verificar_archivo(self) -> None:
        """Verifica que el archivo CSV exista"""
        if not os.path.exists(self.archivo_csv):
            raise FileNotFoundError(f"El archivo {self.archivo_csv} no existe")
    
    def _leer_todas_ofertas(self) -> List[dict]:
        """Lee todas las ofertas del archivo CSV existente"""
        ofertas = []
        try:
            with open(self.archivo_csv, 'r', newline='', encoding='utf-8') as file:
                # Usar delimiter punto y coma
                reader = csv.DictReader(file, delimiter=';')
                for row in reader:
                    # Convertir tipos de datos según la estructura del CSV
                    try:
                        row['OFA_ID'] = int(row['OFA_ID'])
                        row['CUS_CUPOS_NIVELACION'] = int(row['CUS_CUPOS_NIVELACION'])
                        row['CUS_CUPOS_PRIMER_SEMESTRE'] = int(row['CUS_CUPOS_PRIMER_SEMESTRE'])
                        row['CUS_CUPOS_PC'] = int(row['CUS_CUPOS_PC'])
                        row['CUS_TOTAL_CUPOS'] = int(row['CUS_TOTAL_CUPOS'])
                    except (ValueError, KeyError):
                        continue  # Saltar filas con datos inválidos
                    ofertas.append(row)
        except FileNotFoundError:
            raise FileNotFoundError(f"No se pudo encontrar el archivo {self.archivo_csv}")
        return ofertas
    
    def _escribir_todas_ofertas(self, ofertas: List[dict]) -> None:
        """Escribe todas las ofertas al archivo CSV manteniendo la estructura original"""
        with open(self.archivo_csv, 'w', newline='', encoding='utf-8') as file:
            fieldnames = [
                'IES_ID', 'IES_ID_SNIESE', 'IES_NOMBRE_INSTIT', 'PRO_NOMBRE', 
                'CAN_NOMBRE', 'PRQ_NOMBRE', 'CAR_NOMBRE_CARRERA', 'AREA_NOMBRE', 
                'SUBAREA_NOMBRE', 'NIVEL', 'MODALIDAD', 'JORNADA', 'OFA_TITULO', 
                'OFA_ID', 'CUS_ID', 'CUS_CUPOS_NIVELACION', 'CUS_CUPOS_PRIMER_SEMESTRE', 
                'CUS_CUPOS_PC', 'CUS_TOTAL_CUPOS', 'DESCRIPCION_TIPO_CUPO', 'FOCALIZADA'
            ]
            writer = csv.DictWriter(file, fieldnames=fieldnames, delimiter=';')
            writer.writeheader()
            writer.writerows(ofertas)
    
    def guardar(self, oferta: 'OfertaAcademica') -> None:
        """Guarda una nueva oferta en el CSV"""
        ofertas = self._leer_todas_ofertas()
        
        # Verificar si ya existe
        for oferta_existente in ofertas:
            if oferta_existente['OFA_ID'] == oferta.ofa_id:
                raise ValueError(f"Ya existe una oferta con ID {oferta.ofa_id}")
        
        # Crear nueva oferta en el formato del CSV
        nueva_oferta = {
            'IES_ID': oferta.ies_id,
            'IES_ID_SNIESE': oferta.ies_id_sniese,
            'IES_NOMBRE_INSTIT': oferta.ies_nombre_instit,
            'PRO_NOMBRE': oferta.pro_nombre,
            'CAN_NOMBRE': oferta.can_nombre,
            'PRQ_NOMBRE': oferta.prq_nombre,
            'CAR_NOMBRE_CARRERA': oferta.car_nombre_carrera,
            'AREA_NOMBRE': oferta.area_nombre,
            'SUBAREA_NOMBRE': oferta.subarea_nombre,
            'NIVEL': oferta.nivel,
            'MODALIDAD': oferta.modalidad,
            'JORNADA': oferta.jornada,
            'OFA_TITULO': oferta.ofa_titulo,
            'OFA_ID': oferta.ofa_id,
            'CUS_ID': oferta.cus_id,
            'CUS_CUPOS_NIVELACION': oferta.cus_cupos_nivelacion,
            'CUS_CUPOS_PRIMER_SEMESTRE': oferta.cus_cupos_primer_semestre,
            'CUS_CUPOS_PC': oferta.cus_cupos_pc,
            'CUS_TOTAL_CUPOS': oferta.cus_total_cupos,
            'DESCRIPCION_TIPO_CUPO': oferta.descripcion_tipo_cupo,
            'FOCALIZADA': oferta.focalizada
        }
        
        ofertas.append(nueva_oferta)
        self._escribir_todas_ofertas(ofertas)
    
    def actualizar(self, oferta: 'OfertaAcademica') -> None:
        """Actualiza una oferta existente en el CSV"""
        ofertas = self._leer_todas_ofertas()
        encontrada = False
        
        for i, oferta_existente in enumerate(ofertas):
            if oferta_existente['OFA_ID'] == oferta.ofa_id:
                ofertas[i] = {
                    'IES_ID': oferta.ies_id,
                    'IES_ID_SNIESE': oferta.ies_id_sniese,
                    'IES_NOMBRE_INSTIT': oferta.ies_nombre_instit,
                    'PRO_NOMBRE': oferta.pro_nombre,
                    'CAN_NOMBRE': oferta.can_nombre,
                    'PRQ_NOMBRE': oferta.prq_nombre,
                    'CAR_NOMBRE_CARRERA': oferta.car_nombre_carrera,
                    'AREA_NOMBRE': oferta.area_nombre,
                    'SUBAREA_NOMBRE': oferta.subarea_nombre,
                    'NIVEL': oferta.nivel,
                    'MODALIDAD': oferta.modalidad,
                    'JORNADA': oferta.jornada,
                    'OFA_TITULO': oferta.ofa_titulo,
                    'OFA_ID': oferta.ofa_id,
                    'CUS_ID': oferta.cus_id,
                    'CUS_CUPOS_NIVELACION': oferta.cus_cupos_nivelacion,
                    'CUS_CUPOS_PRIMER_SEMESTRE': oferta.cus_cupos_primer_semestre,
                    'CUS_CUPOS_PC': oferta.cus_cupos_pc,
                    'CUS_TOTAL_CUPOS': oferta.cus_total_cupos,
                    'DESCRIPCION_TIPO_CUPO': oferta.descripcion_tipo_cupo,
                    'FOCALIZADA': oferta.focalizada
                }
                encontrada = True
                break
        
        if not encontrada:
            raise ValueError(f"No se encontró la oferta con ID {oferta.ofa_id}")
        
        self._escribir_todas_ofertas(ofertas)
    
    def eliminar(self, ofa_id: int) -> None:
        """Elimina una oferta del CSV"""
        ofertas = self._leer_todas_ofertas()
        ofertas_actualizadas = [
            oferta for oferta in ofertas 
            if oferta['OFA_ID'] != ofa_id
        ]
        
        if len(ofertas_actualizadas) == len(ofertas):
            raise ValueError(f"No se encontró la oferta con ID {ofa_id}")
        
        self._escribir_todas_ofertas(ofertas_actualizadas)
    
    def obtener_por_id(self, ofa_id: int) -> Optional['OfertaAcademica']:
        """Obtiene una oferta por su OFA_ID"""
        ofertas = self._leer_todas_ofertas()
        
        for oferta_data in ofertas:
            if oferta_data['OFA_ID'] == ofa_id:
                return OfertaAcademica(
                    ies_id=oferta_data['IES_ID'],
                    ies_id_sniese=oferta_data['IES_ID_SNIESE'],
                    ies_nombre_instit=oferta_data['IES_NOMBRE_INSTIT'],
                    pro_nombre=oferta_data['PRO_NOMBRE'],
                    can_nombre=oferta_data['CAN_NOMBRE'],
                    prq_nombre=oferta_data['PRQ_NOMBRE'],
                    car_nombre_carrera=oferta_data['CAR_NOMBRE_CARRERA'],
                    area_nombre=oferta_data['AREA_NOMBRE'],
                    subarea_nombre=oferta_data['SUBAREA_NOMBRE'],
                    nivel=oferta_data['NIVEL'],
                    modalidad=oferta_data['MODALIDAD'],
                    jornada=oferta_data['JORNADA'],
                    ofa_titulo=oferta_data['OFA_TITULO'],
                    ofa_id=oferta_data['OFA_ID'],
                    cus_id=oferta_data['CUS_ID'],
                    cus_cupos_nivelacion=oferta_data['CUS_CUPOS_NIVELACION'],
                    cus_cupos_primer_semestre=oferta_data['CUS_CUPOS_PRIMER_SEMESTRE'],
                    cus_cupos_pc=oferta_data['CUS_CUPOS_PC'],
                    cus_total_cupos=oferta_data['CUS_TOTAL_CUPOS'],
                    descripcion_tipo_cupo=oferta_data['DESCRIPCION_TIPO_CUPO'],
                    focalizada=oferta_data['FOCALIZADA'],
                    repository=self
                )
        return None
    
    def obtener_todas(self) -> List['OfertaAcademica']:
        """Obtiene todas las ofertas del CSV"""
        ofertas_data = self._leer_todas_ofertas()
        ofertas = []
        
        for oferta_data in ofertas_data:
            oferta = OfertaAcademica(
                ies_id=oferta_data['IES_ID'],
                ies_id_sniese=oferta_data['IES_ID_SNIESE'],
                ies_nombre_instit=oferta_data['IES_NOMBRE_INSTIT'],
                pro_nombre=oferta_data['PRO_NOMBRE'],
                can_nombre=oferta_data['CAN_NOMBRE'],
                prq_nombre=oferta_data['PRQ_NOMBRE'],
                car_nombre_carrera=oferta_data['CAR_NOMBRE_CARRERA'],
                area_nombre=oferta_data['AREA_NOMBRE'],
                subarea_nombre=oferta_data['SUBAREA_NOMBRE'],
                nivel=oferta_data['NIVEL'],
                modalidad=oferta_data['MODALIDAD'],
                jornada=oferta_data['JORNADA'],
                ofa_titulo=oferta_data['OFA_TITULO'],
                ofa_id=oferta_data['OFA_ID'],
                cus_id=oferta_data['CUS_ID'],
                cus_cupos_nivelacion=oferta_data['CUS_CUPOS_NIVELACION'],
                cus_cupos_primer_semestre=oferta_data['CUS_CUPOS_PRIMER_SEMESTRE'],
                cus_cupos_pc=oferta_data['CUS_CUPOS_PC'],
                cus_total_cupos=oferta_data['CUS_TOTAL_CUPOS'],
                descripcion_tipo_cupo=oferta_data['DESCRIPCION_TIPO_CUPO'],
                focalizada=oferta_data['FOCALIZADA'],
                repository=self
            )
            ofertas.append(oferta)
        
        return ofertas
    
    def obtener_por_carrera(self, carrera: str) -> List['OfertaAcademica']:
        """Obtiene ofertas por nombre de carrera"""
        todas_ofertas = self.obtener_todas()
        return [oferta for oferta in todas_ofertas 
                if carrera.lower() in oferta.car_nombre_carrera.lower()]
    
    def obtener_por_campus(self, campus: str) -> List['OfertaAcademica']:
        """Obtiene ofertas por campus (CAN_NOMBRE)"""
        todas_ofertas = self.obtener_todas()
        return [oferta for oferta in todas_ofertas 
                if campus.lower() in oferta.can_nombre.lower()]


class OfertaAcademica:
    """Clase que representa una oferta académica en el sistema basada en el CSV existente"""
    
    def __init__(self, 
                 ies_id: str,
                 ies_id_sniese: str,
                 ies_nombre_instit: str,
                 pro_nombre: str,
                 can_nombre: str,
                 prq_nombre: str,
                 car_nombre_carrera: str,
                 area_nombre: str,
                 subarea_nombre: str,
                 nivel: str,
                 modalidad: str,
                 jornada: str,
                 ofa_titulo: str,
                 ofa_id: int,
                 cus_id: int,
                 cus_cupos_nivelacion: int,
                 cus_cupos_primer_semestre: int,
                 cus_cupos_pc: int,
                 cus_total_cupos: int,
                 descripcion_tipo_cupo: str,
                 focalizada: str,
                 repository: IOfertaAcademicaRepository = None):
        
        # Atributos según la estructura del CSV
        self._ies_id = ies_id
        self._ies_id_sniese = ies_id_sniese
        self._ies_nombre_instit = ies_nombre_instit
        self._pro_nombre = pro_nombre
        self._can_nombre = can_nombre
        self._prq_nombre = prq_nombre
        self._car_nombre_carrera = car_nombre_carrera
        self._area_nombre = area_nombre
        self._subarea_nombre = subarea_nombre
        self._nivel = nivel
        self._modalidad = modalidad
        self._jornada = jornada
        self._ofa_titulo = ofa_titulo
        self._ofa_id = ofa_id
        self._cus_id = cus_id
        self._cus_cupos_nivelacion = cus_cupos_nivelacion
        self._cus_cupos_primer_semestre = cus_cupos_primer_semestre
        self._cus_cupos_pc = cus_cupos_pc
        self._cus_total_cupos = cus_total_cupos
        self._descripcion_tipo_cupo = descripcion_tipo_cupo
        self._focalizada = focalizada
        self._publicada = True  # En el CSV existente, todas están publicadas
        self._repository = repository
    
    # Encapsulamiento - Getters y Setters para todos los atributos
    @property
    def ies_id(self) -> str:
        return self._ies_id
    
    @property
    def ies_id_sniese(self) -> str:
        return self._ies_id_sniese
    
    @property
    def ies_nombre_instit(self) -> str:
        return self._ies_nombre_instit
    
    @property
    def pro_nombre(self) -> str:
        return self._pro_nombre
    
    @property
    def can_nombre(self) -> str:
        return self._can_nombre
    
    @property
    def prq_nombre(self) -> str:
        return self._prq_nombre
    
    @property
    def car_nombre_carrera(self) -> str:
        return self._car_nombre_carrera
    
    @property
    def area_nombre(self) -> str:
        return self._area_nombre
    
    @property
    def subarea_nombre(self) -> str:
        return self._subarea_nombre
    
    @property
    def nivel(self) -> str:
        return self._nivel
    
    @property
    def modalidad(self) -> str:
        return self._modalidad
    
    @property
    def jornada(self) -> str:
        return self._jornada
    
    @property
    def ofa_titulo(self) -> str:
        return self._ofa_titulo
    
    @property
    def ofa_id(self) -> int:
        return self._ofa_id
    
    @property
    def cus_id(self) -> int:
        return self._cus_id
    
    @property
    def cus_cupos_nivelacion(self) -> int:
        return self._cus_cupos_nivelacion
    
    @cus_cupos_nivelacion.setter
    def cus_cupos_nivelacion(self, value: int) -> None:
        if value < 0:
            raise ValueError("Los cupos de nivelación no pueden ser negativos")
        self._cus_cupos_nivelacion = value
    
    @property
    def cus_cupos_primer_semestre(self) -> int:
        return self._cus_cupos_primer_semestre
    
    @cus_cupos_primer_semestre.setter
    def cus_cupos_primer_semestre(self, value: int) -> None:
        if value < 0:
            raise ValueError("Los cupos de primer semestre no pueden ser negativos")
        self._cus_cupos_primer_semestre = value
    
    @property
    def cus_cupos_pc(self) -> int:
        return self._cus_cupos_pc
    
    @cus_cupos_pc.setter
    def cus_cupos_pc(self, value: int) -> None:
        if value < 0:
            raise ValueError("Los cupos PC no pueden ser negativos")
        self._cus_cupos_pc = value
    
    @property
    def cus_total_cupos(self) -> int:
        return self._cus_total_cupos
    
    @cus_total_cupos.setter
    def cus_total_cupos(self, value: int) -> None:
        if value < 0:
            raise ValueError("El total de cupos no puede ser negativo")
        self._cus_total_cupos = value
    
    @property
    def descripcion_tipo_cupo(self) -> str:
        return self._descripcion_tipo_cupo
    
    @property
    def focalizada(self) -> str:
        return self._focalizada
    
    @property
    def publicada(self) -> bool:
        return self._publicada
    
    # Métodos de la clase
    def registrar_oferta(self) -> bool:
        """Registra la oferta académica en el sistema"""
        if self._repository is None:
            raise ValueError("Repository no configurado para OfertaAcademica")
        
        try:
            self._repository.guardar(self)
            print(f"Oferta académica {self._ofa_id} registrada exitosamente")
            return True
        except Exception as e:
            print(f"Error al registrar oferta: {e}")
            return False
    
    def modificar_oferta(self, **kwargs) -> bool:
        """Modifica los atributos de la oferta académica"""
        if self._repository is None:
            raise ValueError("Repository no configurado para OfertaAcademica")
        
        try:
            # Actualizar atributos permitidos
            atributos_permitidos = [
                'cus_cupos_nivelacion', 'cus_cupos_primer_semestre', 
                'cus_cupos_pc', 'cus_total_cupos', 'modalidad', 'jornada'
            ]
            for key, value in kwargs.items():
                if key in atributos_permitidos:
                    setattr(self, key, value)
            
            self._repository.actualizar(self)
            print(f"Oferta académica {self._ofa_id} modificada exitosamente")
            return True
        except Exception as e:
            print(f"Error al modificar oferta: {e}")
            return False
    
    def eliminar_oferta(self) -> bool:
        """Elimina la oferta académica del sistema"""
        if self._repository is None:
            raise ValueError("Repository no configurado para OfertaAcademica")
        
        try:
            self._repository.eliminar(self._ofa_id)
            print(f"Oferta académica {self._ofa_id} eliminada exitosamente")
            return True
        except Exception as e:
            print(f"Error al eliminar oferta: {e}")
            return False
    
    def publicar_oferta(self) -> bool:
        """Publica la oferta académica"""
        if self._cus_total_cupos <= 0:
            print("No se puede publicar una oferta sin cupos disponibles")
            return False
        
        self._publicada = True
        # Si ya está en el sistema, actualizar
        if self._repository:
            try:
                self._repository.actualizar(self)
            except:
                pass 
        print(f"Oferta académica {self._ofa_id} publicada exitosamente")
        return True
    
    def obtener_cupos_disponibles(self) -> int:
        """Calcula los cupos disponibles totales"""
        return self._cus_total_cupos
    
    def __str__(self) -> str:
        return (f"OfertaAcademica(ID: {self._ofa_id}, "
                f"Carrera: {self._car_nombre_carrera}, "
                f"Campus: {self._can_nombre}, "
                f"Modalidad: {self._modalidad}, "
                f"Jornada: {self._jornada}, "
                f"Cupos Totales: {self._cus_total_cupos})")
